Build a Python-based terminal email sender tool called "TermSender" that runs on command prompt (CMD on Windows) or terminal (Linux/macOS) with a clean, interactive user interface. Use the 'rich' library for colorful panels, tables, progress bars, and menus to create sectioned UI elements (e.g., SMTP config panel, content panel, leads panel, settings panel, dashboard). Use 'typer' or 'click' for CLI commands and subcommands. The tool should be cross-platform, ethical (include warnings about anti-spam laws like CAN-SPAM/GDPR), and support bulk sending to email lists ("leads") with multiple SMTP servers (up to 20) and rotation.

Core Features and Implementation:
- SMTP Configuration: Interactive panel to add/edit up to 20 SMTP servers (host, port, username, password, TLS/SSL, optional OAuth2 for Gmail/Outlook via 'google-auth' or 'msal' libraries â€“ implement OAuth flow with user redirects if needed). Store in a list/dict. Rotation: Implement round-robin, random, or load-based (track success rates per SMTP) using threading or asyncio for parallel/rotated sends.
- Content Selection: Menu to choose type (plain text, HTML, attachments: images/PDFs/docs via file paths). Use 'email.mime' for MIME types/auto-detection. Implement HTML templates with placeholders (e.g., {name}) using string formatting or Jinja2. Add preview mode (display rendered email in console or temp HTML file). Support A/B testing: Allow multiple subject/body variants, randomly assign to leads.
- Leads/Recipients: Section for manual input, import from CSV/JSON/TXT (use 'csv' or 'pandas' for parsing), validation (regex with 're' or 'email-validator' lib), deduplication (sets), segmentation (tag-based groups loaded from file).
- Attachments: Multi-attachment support (list of file paths), check size limits (e.g., 25MB total via os.path.getsize), optional zip compression (use 'zipfile'). Auto-set MIME based on file extension.
- Settings: Advanced config panel saved/loaded from JSON/YAML file (use 'json' or 'yaml' lib). Include: Rotation strategy, sends per SMTP, rate limiting (e.g., X emails per second/minute via time.sleep or 'ratelimit' lib), cooldowns, proxy support (HTTP/SOCKS via 'smtplib' with 'socks' lib if needed), retries (exponential backoff with 'tenacity' lib), dry-run mode, opt-out link generation (append unsubscribe URL), delay randomization (random sleep between sends).
- Monitoring/Logging: Real-time dashboard with 'rich' progress bars/tables for sent/failed/bounced. Log to file/console ('logging' lib). Implement basic tracking (embed pixels if HTML, but warn on privacy).
- Error Handling: Catch SMTP errors, retry failed sends, blacklist bounced emails (store in set/file), notify via console/email.
- Compliance/Ethics: On startup/send, display warnings about laws; require user confirmation for bulk sends. Randomize delays to mimic humans.
- Analytics: Post-send report (JSON/CSV output) with stats; optional simple DB integration (SQLite via 'sqlite3' for send history).
- Extensibility: Basic plugin system (e.g., load custom modules from a directory for new senders/integrations like HubSpot API).
- Additional Enhancements: Multi-threading/async for efficiency (asyncio for non-blocking sends), setup wizard (step-by-step prompts on first run), version checking (hardcode or fetch from GitHub if internet allowed), export/import configs, command-line args for headless mode (e.g., python termsender.py --config config.json --send).
- Testing: Dry-run simulates everything without connecting to SMTP.

Use built-in 'smtplib' for sending, 'email' for messages. Ensure security: Never store passwords in plain text (use 'keyring' for secure storage if possible). Start with MVP: Single SMTP, text email to list of recipients from CSV, basic sections with rich panels, no rotation/attachments. Output full code with comments. Then, add features iteratively: Multi-SMTP/rotation next, then attachments, etc. Explain how to run on Replit/CMD (pip install rich typer email-validator etc.).